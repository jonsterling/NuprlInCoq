#!/bin/bash

if [ -e "universe.v" ]
then
    echo "universe.v already exists"
else
    echo "coping universe-type.v to universe.v"
    cp universe-type.v universe.v
fi

if [ -e "universe2.v" ]
then
    echo "universe2.v already exists"
else
    echo "coping universe2_prop.v to universe2.v"
    cp universe2_prop.v universe2.v
fi

if [ -e "choice.v" ]
then
    echo "choice.v already exists"
else
    echo "coping choice-prop.v to choice.v"
    cp choice-prop.v choice.v
fi

if [ -e "per_props_more.v" ]
then
    echo "per_props_more.v already exists"
else
    echo "coping per_props_more_prop.v to per_props_more.v"
    cp per_props_more_prop.v per_props_more.v
fi

function get_deps () {
    grep "^Require" $1.v \
    | sed 's/Require Import \(.*\)\..*$/\1/' \
    | sed 's/Require Export \(.*\)\..*$/\1/' \
    | sed 's/Require \(.*\)\..*$/\1/'
}

containsElement () {
    local e
    for e in "${@:2}"; do
	[[ "$e" == "$1" ]] && return 0;
    done
    return 1
}

declare -A aa
declare -a remfiles
declare -a allfiles
#declare -a temp

remfiles=("rules")
allfiles=("rules")

echo "`date`" > debug

while true
do
    #printf '%s\n' "==+== ${remfiles[@]} ==+=="
    if [[ ${#remfiles[@]} -eq 0 ]]
    then
	echo "++++++ no more files" >> debug
	break
    else
	file=${remfiles[0]}
	remfiles=("${remfiles[@]:1}")
	#printf '%s\n' "++=++ ${remfiles[@]} ++=++"
	echo "===============================" >> debug
	echo "++++++ file: ${file}" >> debug

	temp=`get_deps $file`
	deps=()
	for f in $temp
	do
	    #echo $f
	    if [ -e "${f}.v" ]
	    then
		#echo "./$f"
		deps+=("$f")
	    else
		if [ -e "close/${f}.v" ]
		then
		    #echo "close/$f"
		    deps+=("close/$f")
		else
		    echo "${f} doesn't exist" >> debug
		fi
	    fi	    
	done
	#printf '%s\n' "++=++ ${deps[@]} ++=++"
	#deps=("${temp[@]}")

	aa[$file]=${deps[@]}
   
	for i in "${deps[@]}"
	do
	    #echo "checking $i"
	    containsElement "$i" "${allfiles[@]}"
	    n=$?
	    if [[ $n -eq 1 ]]
	    then
		echo "++ new dependency: ${i}" >> debug
		remfiles=("${remfiles[@]}" "$i")
		allfiles=("${allfiles[@]}" "$i")
	    else echo "++ not new dependency: ${i}" >> debug
	    fi
	done
    fi
done

echo "# Makefile generated by create_makefile.sh" > Makefile
echo "" >> Makefile
echo "default : rules.vo" >> Makefile

for i in "${!aa[@]}"
do
    #echo "-------------------"
    #echo "++ ${i}"

    echo "" >> Makefile
    echo -n "${i}.vo : ${i}.v" >> Makefile

    if [[ ${#aa[$i]} -eq 0 ]]
    then
	echo "${i} doesn't have dependencies"
    else
	#echo "${aa[$i]}"
	IFS=' ' read -a vals <<< "${aa[$i]}"
	for f in "${vals[@]}"
	do
	    #echo "---- ${f}"
	    echo -n " ${f}.vo" >> Makefile
	done
    fi

    echo "" >> Makefile
    echo "	coqc -I close ${i}.v" >> Makefile
done
